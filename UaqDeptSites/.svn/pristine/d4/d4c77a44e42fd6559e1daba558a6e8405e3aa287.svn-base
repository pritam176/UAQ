package com.uaq.service;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import uaq.db.si.model.common.AccountDetailsViewSDO;

import com.uaq.common.PropertiesUtil;
import com.uaq.vo.SendBackInfo;
import com.uaq.vo.SendBackInfo.ServiceAttachment;
import com.uaq.service.WebServiceInvoker.RequestIdData;
import com.uaq.util.UCMUploader;
import com.uaq.util.UCMUploader.AttachmentInfo;

public class GrantLandRequestExceptionServiceHandler extends GrantLandRequestServiceHandler {
	
	private static final SimpleDateFormat dateFormatter = new SimpleDateFormat("dd-MM-yyyy");
	
	@Override
	public String saveOrSubmitServiceRequestData(String phase, AccountDetailsViewSDO accountDetails, LPServiceLookUp lookupServiceEN_AR, Map<String, String> params, List<AttachmentInfo> attachmentInfos) throws Exception {
		Map<String, Object> inputParams = new HashMap<String, Object>();		

		if (attachmentInfos.size() > 0 && !new UCMUploader().genericUploadAttachment(attachmentInfos))
			return null;
		try {
			inputParams.putAll(params);
			inputParams.put("serviceId", params.get("serviceId"));
			inputParams.put("serviceDept", params.get("serviceDept"));
			inputParams.put("phase", phase);
			inputParams.put("accountDetails", accountDetails);

			RequestIdData requestData = WebServiceInvoker.saveGrantLandRequest(inputParams); 
			String requestNumber = requestData.getRequestNumber();
			String requestId = requestData.getRequestId();
//			inputParams.put("requestNumber", requestNumber);
//			inputParams.put("requestId", requestId);
//			inputParams.put("stepAction", "SUBMITTED");
//			inputParams.put("stepName", null);
			
			Map<String, Object> attachParams = new HashMap<String, Object>();
			attachParams.put("fromRequestId", lookupServiceEN_AR.getApplicantRequestByRequestNumber(params.get("fromRequestNo")).getRequestId().toString());
			attachParams.put("toRequestId", requestId);
			attachParams.put("serviceId", params.get("serviceId"));
			WebServiceInvoker.copyRequestLatestAttachments(attachParams);
			
			inputParams.put("requestNumber", requestData.getRequestNumber());
			inputParams.put("requestId", requestData.getRequestId());
			inputParams.put("stepAction", "SUBMITTED");
			inputParams.put("stepName", "BEFORE_APP_FEES");
			inputParams.put("applicantId", accountDetails.getId());
			inputParams.put("applicantName", accountDetails.getFirstName());
			inputParams.put("amount", params.get("feeAmount"));
			inputParams.put("status", "1");
			WebServiceInvoker.sendSmsAndEMail(inputParams);
			
			System.out.println("--------->  Request Id: " + requestData.getRequestId());
			for (AttachmentInfo attachmentInfo : attachmentInfos) {
				attachmentInfo.setRequestId(requestData.getRequestId());
				attachmentInfo.setServiceId(inputParams.get("serviceId").toString());
			}
			if (!new UCMUploader().genericSaveAttachmentToDB(attachmentInfos))
				return null;
			else {				
				SendBackInfo sendBackInfo = WebServiceInvoker.getSendBackInfo(requestId);
				for (Map.Entry<String, ServiceAttachment> entry : sendBackInfo.getLatestApplicantAttachment().entrySet()) {
				    String attachIdName = null, attachIdValue = null, attachDocIdName = null, attachDocIdValue = null;
				    if(entry.getValue().getDocId().equals(AttachmentTypes.FamilyBook.getDocTypeId())) {
				    	attachIdName = AttachmentTypes.FamilyBook.getFieldName() + "Id";
				    	attachIdValue = entry.getValue().getDID();
				    	attachDocIdName = AttachmentTypes.FamilyBook.getFieldName() + "DocId";
				    	attachDocIdValue = entry.getValue().getAttachmentId();
				    } else if(entry.getValue().getDocId().equals(AttachmentTypes.PropertyAccounting.getDocTypeId())) {
				    	attachIdName = AttachmentTypes.PropertyAccounting.getFieldName() + "Id";
				    	attachIdValue = entry.getValue().getDID();
				    	attachDocIdName = AttachmentTypes.PropertyAccounting.getFieldName() + "DocId";
				    	attachDocIdValue = entry.getValue().getAttachmentId();
				    } else if(entry.getValue().getDocId().equals(AttachmentTypes.SalaryCertificate.getDocTypeId())) {
				    	attachIdName = AttachmentTypes.SalaryCertificate.getFieldName() + "Id";
				    	attachIdValue = entry.getValue().getDID();
				    	attachDocIdName = AttachmentTypes.SalaryCertificate.getFieldName() + "DocId";
				    	attachDocIdValue = entry.getValue().getAttachmentId();
				    } else if(entry.getValue().getDocId().equals(AttachmentTypes.SpouseEmirate.getDocTypeId())) {
				    	attachIdName = AttachmentTypes.SpouseEmirate.getFieldName() + "Id";
				    	attachIdValue = entry.getValue().getDID();
				    	attachDocIdName = AttachmentTypes.SpouseEmirate.getFieldName() + "DocId";
				    	attachDocIdValue = entry.getValue().getAttachmentId();
				    } else if(entry.getValue().getDocId().equals(AttachmentTypes.RulersCourtAcceptance.getDocTypeId())) {
				    	attachDocIdName = AttachmentTypes.RulersCourtAcceptance.getFieldName() + "DocId";
				    	attachDocIdValue = entry.getValue().getAttachmentId();
				    }
				    
				    if(attachIdName != null)		//RulersCourtAcceptance attachment does not have RulersCourtAcceptanceId column
				    	inputParams.put(attachIdName, attachIdValue);
				    inputParams.put(attachDocIdName, attachDocIdValue);
				}
				
				WebServiceInvoker.updateGrantLandRequestWithAttachments(inputParams);
			}
			
			System.out.println("Request Saved");
			
			params.put("requestNumber", requestNumber);
			params.put("requestId", requestId);			
			issueServiceRequest(accountDetails, lookupServiceEN_AR, null, params);
			
			return requestData.getRequestNumber();
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	protected void issueServiceRequest(Map<String, Object> inputParams) throws Exception {
		SendBackInfo sendBackInfo = WebServiceInvoker.getSendBackInfo((String)inputParams.get("requestId"));
		ServiceAttachment sitePlanAttachment = sendBackInfo.getLatestApplicantAttachment().get(AttachmentTypes.SiteDocumentPlan.getDocTypeId());
		
		inputParams.put("requestDate", dateFormatter.format(new Date()));
		inputParams.put("sitePlanAttachment", sitePlanAttachment);
		WebServiceInvoker.issueGrantLandRequestExceptionProcess(inputParams);
	}

	@Override
	public void proceedWithServiceAfterPayment(Map<String, String> params) throws Exception {
		WebServiceInvoker.proceedWithLpServiceAfterPayment(PropertiesUtil.getProperty("SOA_URL_GRANTLAND_EXCEP_REQ"), 
				"catchPayment", "requestNo", params.get("requestNumber"));
	}

	@Override
	public String getPhaseActivityName(String phase) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getResubmissionUser() {
		// TODO Auto-generated method stub
		return null;
	}

}
