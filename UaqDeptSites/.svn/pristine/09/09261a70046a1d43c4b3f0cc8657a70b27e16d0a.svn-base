package com.uaq.service;

import static com.uaq.common.ApplicationConstants.SERVICE_FAILED;

import java.text.ParseException;

import javax.xml.datatype.DatatypeConfigurationException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import com.uaq.common.PropertiesUtil;
import com.uaq.controller.mapper.PortalDataMapper;
import com.uaq.logger.UAQLogger;
import com.uaq.proxies.ExtensionOfGrantLandProcessForOut.types.OutputPayload;
import com.uaq.proxies.IssueSitePlanDocSystemizedServiceForOut.types.PaymentDetailsPayload;
import com.uaq.proxies.LandDemarcationServiceForOut.types.AttachmentListPayload;
import com.uaq.proxies.LandDemarcationServiceForOut.types.AttachmentRecPayload;
import com.uaq.proxies.LandDemarcationServiceForOut.types.Inputpayload;
import com.uaq.soap.warpper.WebServiceWarpper;
import com.uaq.util.DateUtil;
import com.uaq.util.StringUtil;
import com.uaq.vo.LandInputVO;
import com.uaq.vo.LandOutputVO;
import com.uaq.vo.UserDeatilVO;

/**
 * Service class for ReSubmit or after Application Payment Service Based on
 * request status.
 * 
 * JAR Name-UAQProxy Note-This Can Also Use For Review.
 * 
 * Note -WSDL URL May be changed depend on environment. URL will load from
 * Application.property file.
 * 
 * @author Pritam
 * 
 */

@Service
@Qualifier("pSReSubmissionRequestService")
public class PSReSubmissionRequestService {

	protected static UAQLogger logger = new UAQLogger(PSReSubmissionRequestService.class);

	@Autowired
	private UCMCenterURLService uCMCenterURLService;

	private WebServiceWarpper webServiceWarpper = new WebServiceWarpper();

	public LandOutputVO reSubmitAddLand(UserDeatilVO user, LandInputVO landDemacreationVO) {

		LandOutputVO outputVO = new LandOutputVO();

		com.uaq.proxies.AddLandReqProcessForOut.types.Inputpayload inputpayload = new com.uaq.proxies.AddLandReqProcessForOut.types.Inputpayload();

		com.uaq.proxies.AddLandReqProcessForOut.types.UserDetailsPayload userDetail = new com.uaq.proxies.AddLandReqProcessForOut.types.UserDetailsPayload();

		userDetail.setUsername(user.getLoginUserName());
		userDetail.setTypeOfUser(user.getTypeOfUser());
		userDetail.setNationality(user.getNationality());
		userDetail.setAccountid(user.getAccountid());
		userDetail.setMobileNo(user.getMobileNo());
		userDetail.setEmailID(user.getEmailID());
		userDetail.setEmiratesId(user.getEmiratesId());
		userDetail.setTradeLienceNo(user.getTradeLienceNo());
		userDetail.setFamilyBookNo(user.getFamilyBookNo());
		userDetail.setEmirate(user.getEmiratesCode());
		userDetail.setFirstName(user.getFirstName());
		userDetail.setMiddleName(user.getMiddleName());
		userDetail.setLastName(user.getLastName());
		userDetail.setAddress1(user.getAddress1());
		userDetail.setAddress2(user.getAddress2());
		userDetail.setAddress3(user.getAddress3());
		userDetail.setPOBOX(user.getPOBOX());
		userDetail.setDOB(null);
		// userDetail.setEmiratesId(user.getEmiratesCode());

		if ("1".equals(user.getTypeOfUser())) {
			userDetail.setApplicanttypeid(user.getApplicantTypeId());
		} else {
			userDetail.setApplicanttypeid("0");
		}

		inputpayload.setServiceType(landDemacreationVO.getServiceType());
		inputpayload.setUserComment(landDemacreationVO.getUserComment());
		inputpayload.setSubmittedByUserId(landDemacreationVO.getSubmittedByUserId());
		inputpayload.setSourceType(landDemacreationVO.getSourceType());
		inputpayload.setStatus(landDemacreationVO.getStatus());
		inputpayload.setServiceName(landDemacreationVO.getServiceName());
		inputpayload.setServiceid(landDemacreationVO.getServiceid());
		inputpayload.setRequestID(landDemacreationVO.getRequestID());
		inputpayload.setRequestNo(landDemacreationVO.getRequestNo());
		inputpayload.setWorkflowId(landDemacreationVO.getWorkflowId()); //
		// inputpayload.setLandDemarcationId(landDemacreationVO.getLandDemarcationId());
		inputpayload.setLanguageId(landDemacreationVO.getLanguageId());
		inputpayload.setSitePlanNo(landDemacreationVO.getSite_Plan_No());
		//
		inputpayload.setSitePlanDate(null);

		inputpayload.setSecPlotNo(landDemacreationVO.getSecPlotNo());
		inputpayload.setSectorBlock(landDemacreationVO.getSectorBlock());
		inputpayload.setSecSectorName(landDemacreationVO.getSecSectorName());
		inputpayload.setSubSectorNo(landDemacreationVO.getSubSectorNo());
		inputpayload.setAreaName(landDemacreationVO.getAreaName());
		inputpayload.setAreaBlock(landDemacreationVO.getAreaBlock());
		inputpayload.setAreaPlotNo(landDemacreationVO.getAreaPlotNo());
		inputpayload.setAreaSubArea(landDemacreationVO.getAreaSubArea());
		inputpayload.setAreaSubArea(landDemacreationVO.getAreaSubArea());
		inputpayload.setLandUsage(landDemacreationVO.getLandUsage()); //
		inputpayload.setGrantIssuanceDate(null);

		inputpayload.setAssignedToUserName(landDemacreationVO.getAssignedToUserName());
		inputpayload.setSurveyorReport(landDemacreationVO.getSurveyo_Report());
		inputpayload.setOwnerName(landDemacreationVO.getOwnerName());
		inputpayload.setSurveReportDocId(landDemacreationVO.getSurveReportDocId());
		inputpayload.setOwnerID(landDemacreationVO.getOwnerID());
		inputpayload.setOwnerNationalityID(landDemacreationVO.getOwnerNationalityID());
		inputpayload.setSupportiveAttachmentid(landDemacreationVO.getSupportiveAttachmentid()); //
		inputpayload.setExtendedDate(null);
		// inputpayload.setCommiteeRemarks(landDemacreationVO.getCommiteeRemarks());
		// inputpayload.setLandValue(new
		// BigInteger(landDemacreationVO.getLandValue()));
		inputpayload.setUserdecision(landDemacreationVO.getUserDecesion());

		String did = "";
		String filenme = "";
		String ucmUrl = "";
		com.uaq.proxies.AddLandReqProcessForOut.types.AttachmentListPayload attachmentList = new com.uaq.proxies.AddLandReqProcessForOut.types.AttachmentListPayload();
		if (!StringUtil.isEmpty(landDemacreationVO.getSitePlanDocument())) {
			String filenmae = landDemacreationVO.getSitePlanDocument();
			logger.debug("File Name from Controller   |  " + filenmae);
			did = filenmae.split("-")[0];
			filenme = filenmae.split("-")[1];
			logger.debug("File filenme=" + filenme);
			logger.debug("File did=" + did);

			ucmUrl = uCMCenterURLService.getWebCenterURLofFile(did);

			logger.debug("From WebCenter URL=" + ucmUrl);
			com.uaq.proxies.AddLandReqProcessForOut.types.AttachmentRecPayload attachmentRec = new com.uaq.proxies.AddLandReqProcessForOut.types.AttachmentRecPayload();

			attachmentRec.setContentid(did);
			attachmentRec.setFilename(filenme);
			attachmentRec.setUrl(ucmUrl);
			attachmentRec.setIsMandatory("1");
			attachmentList.getAttachmentRec().add(attachmentRec);
		}

		inputpayload.setAttachmentList(attachmentList);
		inputpayload.setUserDetails(userDetail);

		com.uaq.proxies.AddLandReqProcessForOut.types.PaymentDetailsPayload paymentDetails = new com.uaq.proxies.AddLandReqProcessForOut.types.PaymentDetailsPayload();
		paymentDetails.setApplicationPaymentDiscount("");
		paymentDetails.setApplicationPaymentFees(landDemacreationVO.getTransationAmount());
		paymentDetails.setApplicationPaymentId(landDemacreationVO.getTransactionId());
		paymentDetails.setApplicationPaymentStatus(landDemacreationVO.getTransationStatus());
		paymentDetails.setServicePaymentDiscount("");
		paymentDetails.setServicePaymentFees("");
		paymentDetails.setServicePaymentId("");
		paymentDetails.setServicePaymentStatus("");
		inputpayload.setPaymentDetails(paymentDetails);

		try {
			com.uaq.proxies.AddLandReqProcessForOut.types.OutputPayload output = webServiceWarpper.reSubmitorPaymentAddLand(inputpayload, PropertiesUtil.getProperty("SOA_URL_PS_ADDLAND_RESUBMIT"),
					PropertiesUtil.getProperty("SOA_USERNAME"), PropertiesUtil.getProperty("SOA_PASSWORD"));

			if (output != null) {
				outputVO.setStatus(output.getStausFlag());
				outputVO.setStatus_EN(output.getStatusEN());
				outputVO.setStatus_AR(output.getStatusAR());
				outputVO.setRequestNo(output.getRequestNo());
				logger.info(output.getStausFlag() + "  | " + output.getStatusEN());
			} else {
				logger.info(" Failed | webServiceWarpper.reSubmitorPaymentAddLand  Return Null");
				outputVO.setStatus(SERVICE_FAILED);
			}

		} catch (Exception e) {
			logger.error("Failed  |  " + e.getMessage());
			outputVO.setStatus(SERVICE_FAILED);
		}

		return outputVO;
	}

	/**
	 * This Method is responsible for moving the LandDemarcation request to next
	 * step after Payment or Resubmit Based on status
	 * 
	 * WSDL -http://soa:8001/soa-infra/services/PS_Department/
	 * UAQ_PS_LandDemarcation/LandDemarcationServiceForOut.service?WSDL
	 * JAR-UAQProxy
	 * 
	 * @author Pritam
	 * 
	 */

	public LandOutputVO reSubmitLandDemarcationPalnDocument(UserDeatilVO user, LandInputVO landDemacreationVO) throws DatatypeConfigurationException, ParseException {

		LandOutputVO outputVO = new LandOutputVO();
		Inputpayload inputpayload = new com.uaq.proxies.LandDemarcationServiceForOut.types.Inputpayload();

		com.uaq.proxies.LandDemarcationServiceForOut.types.UserDetailsPayload userDetail = new com.uaq.proxies.LandDemarcationServiceForOut.types.UserDetailsPayload();

		userDetail.setUsername(user.getLoginUserName());
		userDetail.setTypeOfUser(user.getTypeOfUser());
		userDetail.setNationality(user.getNationality());
		userDetail.setAccountid(user.getAccountid());
		userDetail.setMobileNo(user.getMobileNo());
		userDetail.setEmailID(user.getEmailID());
		userDetail.setEmiratesId(user.getEmiratesId());
		userDetail.setTradeLienceNo(user.getTradeLienceNo());
		userDetail.setFamilyBookNo(user.getFamilyBookNo());
		// userDetail.setEmirate(user.getEmirate());
		userDetail.setFirstName(user.getFirstName());
		userDetail.setMiddleName(user.getMiddleName());
		userDetail.setLastName(user.getLastName());
		userDetail.setAddress1(user.getAddress1());
		userDetail.setAddress2(user.getAddress2());
		userDetail.setAddress3(user.getAddress3());
		userDetail.setPOBOX(user.getPOBOX());
		userDetail.setDOB(DateUtil.convertDateToXMLGregorianCalendar(user.getDOB()));
		userDetail.setEmirate(user.getEmiratesCode());

		if ("1".equals(user.getTypeOfUser())) {
			userDetail.setApplicantTypeid(user.getApplicantTypeId());
		} else {
			userDetail.setApplicantTypeid("0");
		}
		inputpayload.setServiceType(landDemacreationVO.getServiceType());
		inputpayload.setUserComment(landDemacreationVO.getUserComment());
		inputpayload.setSubmittedByUserId(landDemacreationVO.getSubmittedByUserId());
		inputpayload.setSourceType(landDemacreationVO.getSourceType());
		inputpayload.setStatus(landDemacreationVO.getStatus());
		inputpayload.setServiceName(landDemacreationVO.getServiceName());
		inputpayload.setServiceid(landDemacreationVO.getServiceid());
		inputpayload.setRequestID(landDemacreationVO.getRequestID());
		inputpayload.setRequestNo(landDemacreationVO.getRequestNo());
		inputpayload.setWorkflowId(landDemacreationVO.getWorkflowId());
		inputpayload.setLandDemarcationId(landDemacreationVO.getLandDemarcationId());
		inputpayload.setLanguageId(landDemacreationVO.getLanguageId());
		inputpayload.setSitePlanNo(landDemacreationVO.getSite_Plan_No());
		inputpayload.setSitePlanDate(null);
		inputpayload.setSecPlotNo(landDemacreationVO.getSecPlotNo());
		inputpayload.setSectorBlock(landDemacreationVO.getSectorBlock());
		inputpayload.setSecSectorName(landDemacreationVO.getSecSectorName());
		inputpayload.setSubSectorNo(landDemacreationVO.getSubSectorNo());
		inputpayload.setAreaName(landDemacreationVO.getAreaName());
		inputpayload.setAreaBlock(landDemacreationVO.getAreaBlock());
		inputpayload.setAreaPlotNo(landDemacreationVO.getAreaPlotNo());
		inputpayload.setAreaSubArea(landDemacreationVO.getAreaSubArea());
		inputpayload.setAreaSubArea(landDemacreationVO.getAreaSubArea());
		inputpayload.setLandUsage(landDemacreationVO.getLandUsage());
		inputpayload.setGrantIssuanceDate(null);
		inputpayload.setAssignedToUserName(landDemacreationVO.getAssignedToUserName());
		inputpayload.setSurveyorReport(landDemacreationVO.getSurveyo_Report());
		inputpayload.setOwnerName(landDemacreationVO.getOwnerName());
		inputpayload.setSurveReportDocId(landDemacreationVO.getSurveReportDocId());
		inputpayload.setOwnerID(landDemacreationVO.getOwnerID());
		inputpayload.setOwnerNationalityID(landDemacreationVO.getOwnerNationalityID());
		inputpayload.setSupportiveAttachmentid(landDemacreationVO.getSupportiveAttachmentid());
		inputpayload.setExtendedDate(null);
		inputpayload.setDownloadurlIp("");
		inputpayload.setMarkasDelivered("");
		inputpayload.setOperatorComment("");
		inputpayload.setRecieverIDDocument("");
		inputpayload.setSubmittedDate(null);
		inputpayload.setFrontDeskSubmitDate(null);
		inputpayload.setLandDemarcationId("");
		inputpayload.setUserdecision(landDemacreationVO.getUserDecesion());
		String did = "";
		String fileName = "";
		String ucmUrl = "";
		AttachmentListPayload attachmentListPayload = new AttachmentListPayload();
		if (!StringUtil.isEmpty(landDemacreationVO.getSitePlanDocument())) {
			String filenmae = landDemacreationVO.getSitePlanDocument();
			logger.debug("File Name from Controller   |  " + filenmae);
			did = filenmae.split("-")[0];
			fileName = filenmae.split("-")[1];
			logger.debug("File Did=" + did);
			logger.debug("File fileName=" + fileName);
			ucmUrl = uCMCenterURLService.getWebCenterURLofFile(did);
			logger.debug("From WebCenter URL=" + ucmUrl);
			AttachmentRecPayload attach = new AttachmentRecPayload();
			attach.setContentid(did);
			attach.setFilename(fileName);
			attach.setUrl(ucmUrl);
			attach.setIsMandatory("1");
			attach.setDownloadUrl("test");
			attachmentListPayload.getAttachmentRec().add(attach);
		}

		inputpayload.setAttachmentList(attachmentListPayload);

		com.uaq.proxies.LandDemarcationServiceForOut.types.PaymentDetailsPayload paymentDetails = new com.uaq.proxies.LandDemarcationServiceForOut.types.PaymentDetailsPayload();
		paymentDetails.setApplicationPaymentDiscount("");
		paymentDetails.setApplicationPaymentFees(landDemacreationVO.getTransationAmount());
		paymentDetails.setApplicationPaymentId(landDemacreationVO.getTransactionId());
		paymentDetails.setApplicationPaymentStatus(landDemacreationVO.getTransationStatus());
		paymentDetails.setServicePaymentDiscount("");
		paymentDetails.setServicePaymentFees("");
		paymentDetails.setServicePaymentId("");
		paymentDetails.setServicePaymentStatus("");
		inputpayload.setPaymentDetails(paymentDetails);

		inputpayload.setUserDetails(userDetail);

		try {
			com.uaq.proxies.LandDemarcationServiceForOut.types.OutputPayload output = webServiceWarpper.reSubmitLandDemarcationRequestORPayment(inputpayload,
					PropertiesUtil.getProperty("SOA_URL_PS_LANDDEMACRATION_RESUBMIT"), PropertiesUtil.getProperty("SOA_USERNAME"), PropertiesUtil.getProperty("SOA_PASSWORD"));
			if (output != null) {
				outputVO.setStatus(output.getStausFlag());
				outputVO.setStatus_EN(output.getStatusEN());
				outputVO.setStatus_AR(output.getStatusAR());
				outputVO.setStatus(output.getStausFlag());
				logger.info(output.getStausFlag() + "  | " + output.getRequestNo() + "  | " + output.getStatusEN());
			} else {
				logger.info(" Failed | stub.reSubmitLandDemarcationRequest(inputpayload, uc)  return Null");
				outputVO.setStatus(SERVICE_FAILED);
			}

		} catch (Exception e) {
			logger.error("Failed  |  " + e.getMessage());
			outputVO.setStatus(SERVICE_FAILED);
		}

		return outputVO;

	}

	/**
	 * This Method is responsible for moving the IssueSitePlanDoc request to
	 * next step after Payment or Resubmit Based on status
	 * 
	 * WSDL -http://soa:8001/soa-infra/services/PS_Department/
	 * UAQ_PS_IssueSitePlanDocumentReq
	 * /IssueSitePlanDocSystemizedServiceForOut.service?WSDL JAR-UAQProxy
	 * 
	 * @author Pritam
	 * 
	 */

	public LandOutputVO reSubmitissueSitePlanDocument(UserDeatilVO user, LandInputVO issueSitePlanVO) {
		LandOutputVO outputVO = new LandOutputVO();

		com.uaq.proxies.IssueSitePlanDocSystemizedServiceForOut.types.Inputpayload inputpayload = new com.uaq.proxies.IssueSitePlanDocSystemizedServiceForOut.types.Inputpayload();

		com.uaq.proxies.IssueSitePlanDocSystemizedServiceForOut.types.UserDetailsPayload userDetail = new com.uaq.proxies.IssueSitePlanDocSystemizedServiceForOut.types.UserDetailsPayload();

		userDetail.setUsername(user.getLoginUserName());
		userDetail.setTypeOfUser(user.getTypeOfUser());
		userDetail.setNationality(user.getNationality());
		userDetail.setAccountid(user.getAccountid());
		userDetail.setMobileNo(user.getMobileNo());
		userDetail.setEmailID(user.getEmailID());
		userDetail.setEmiratesId(user.getEmiratesId());
		userDetail.setTradeLienceNo(user.getTradeLienceNo());
		userDetail.setFamilyBookNo(user.getFamilyBookNo());
		userDetail.setEmirate(user.getEmirate());
		userDetail.setFirstName(user.getFirstName());
		userDetail.setMiddleName(user.getMiddleName());
		userDetail.setLastName(user.getLastName());
		userDetail.setAddress1(user.getAddress1());
		userDetail.setAddress2(user.getAddress2());
		userDetail.setAddress3(user.getAddress3());
		userDetail.setPOBOX(user.getPOBOX());
		userDetail.setDOB(null);
		// userDetail.setEmiratesId(user.getEmiratesCode());

		if ("1".equals(user.getTypeOfUser())) {
			userDetail.setApplicanttypeid(user.getApplicantTypeId());
		} else {
			userDetail.setApplicanttypeid("0");
		}

		inputpayload.setServiceType(issueSitePlanVO.getServiceType());
		inputpayload.setUserComment(issueSitePlanVO.getUserComment());
		inputpayload.setSubmittedByUserId(issueSitePlanVO.getSubmittedByUserId());
		inputpayload.setSourceType(issueSitePlanVO.getSourceType());
		inputpayload.setStatus(issueSitePlanVO.getStatus());
		inputpayload.setServiceName(issueSitePlanVO.getServiceName());
		inputpayload.setServiceid(issueSitePlanVO.getServiceid());
		inputpayload.setRequestID(issueSitePlanVO.getRequestID());
		inputpayload.setRequestNo(issueSitePlanVO.getRequestNo());
		inputpayload.setWorkflowId(issueSitePlanVO.getWorkflowId()); //

		inputpayload.setLanguageId(issueSitePlanVO.getLanguageId());
		inputpayload.setSitePlanNo(issueSitePlanVO.getSite_Plan_No());
		inputpayload.setSitePlanDate(null);
		inputpayload.setSecPlotNo(issueSitePlanVO.getSecPlotNo());
		inputpayload.setSectorBlock(issueSitePlanVO.getSectorBlock());
		inputpayload.setSecSectorName(issueSitePlanVO.getSecSectorName());
		inputpayload.setSubSectorNo(issueSitePlanVO.getSubSectorNo());
		inputpayload.setAreaName(issueSitePlanVO.getAreaName());
		inputpayload.setAreaBlock(issueSitePlanVO.getAreaBlock());
		inputpayload.setAreaPlotNo(issueSitePlanVO.getAreaPlotNo());
		// inputpayload.setAreaSubArea(issueSitePlanVO.getAreaSubArea());
		inputpayload.setAreaSubArea(issueSitePlanVO.getAreaSubArea());
		inputpayload.setLandUsage(issueSitePlanVO.getLandUsage());
		inputpayload.setGrantIssuanceDate(null);
		inputpayload.setAssignedToUserName(issueSitePlanVO.getAssignedToUserName());
		inputpayload.setSurveyorReport(issueSitePlanVO.getSurveyo_Report());
		inputpayload.setOwnerName(issueSitePlanVO.getOwnerName());
		inputpayload.setSurveReportDocId(issueSitePlanVO.getSurveReportDocId());
		inputpayload.setOwnerID(issueSitePlanVO.getOwnerID());
		inputpayload.setOwnerNationalityID(issueSitePlanVO.getOwnerNationalityID());
		inputpayload.setSupportiveAttachmentid(issueSitePlanVO.getSupportiveAttachmentid());
		inputpayload.setExtendedDate(null);
		inputpayload.setCommiteeRemarks(issueSitePlanVO.getCommiteeRemarks());
		inputpayload.setLandValue(null);
		inputpayload.setUserdecision(issueSitePlanVO.getUserDecesion());

		PaymentDetailsPayload paymentDetails = new PaymentDetailsPayload();
		paymentDetails.setApplicationPaymentDiscount("");
		paymentDetails.setApplicationPaymentFees(issueSitePlanVO.getTransationAmount());
		paymentDetails.setApplicationPaymentId(issueSitePlanVO.getTransactionId());
		paymentDetails.setApplicationPaymentStatus(issueSitePlanVO.getTransationStatus());
		paymentDetails.setServicePaymentDiscount("");
		paymentDetails.setServicePaymentFees("");
		paymentDetails.setServicePaymentId("");
		paymentDetails.setServicePaymentStatus("");
		inputpayload.setPaymentDetails(paymentDetails);

		String did = "";
		String filenme = "";
		String ucmUrl = "";
		com.uaq.proxies.IssueSitePlanDocSystemizedServiceForOut.types.AttachmentListPayload attachmentList = new com.uaq.proxies.IssueSitePlanDocSystemizedServiceForOut.types.AttachmentListPayload();
		if (!StringUtil.isEmpty(issueSitePlanVO.getSitePlanDocument())) {
			String filenmae = issueSitePlanVO.getSitePlanDocument();
			logger.debug("File Name from Controller   |  " + filenmae);
			did = filenmae.split("-")[0];
			filenme = filenmae.split("-")[1];
			logger.debug("File Did=" + did);
			logger.debug("File filenme=" + filenme);
			ucmUrl = uCMCenterURLService.getWebCenterURLofFile(did);
			logger.debug("From WebCenter URL=" + ucmUrl);
			com.uaq.proxies.IssueSitePlanDocSystemizedServiceForOut.types.AttachmentRecPayload attachmentRec = new com.uaq.proxies.IssueSitePlanDocSystemizedServiceForOut.types.AttachmentRecPayload();
			attachmentRec.setContentid(did);
			attachmentRec.setFilename(filenme);
			attachmentRec.setUrl(ucmUrl);
			attachmentRec.setIsMandatory("1");

			attachmentList.getAttachmentRec().add(attachmentRec);
		}

		inputpayload.setAttachmentList(attachmentList);
		inputpayload.setUserDetails(userDetail);

		try {
			com.uaq.proxies.IssueSitePlanDocSystemizedServiceForOut.types.OutputPayload output = webServiceWarpper.resubmitOrPaymentIssueSitepLan(inputpayload,
					PropertiesUtil.getProperty("SOA_URL_PS_ISSUESITEPLAN_RESUBMIT"), PropertiesUtil.getProperty("SOA_USERNAME"), PropertiesUtil.getProperty("SOA_PASSWORD"));
			if (output != null) {
				outputVO.setStatus(output.getStausFlag());
				outputVO.setStatus_EN(output.getStatusEN());
				outputVO.setStatus_AR(output.getStatusAR());
				outputVO.setRequestNo(output.getRequestNo());
				logger.info(output.getStausFlag() + "  | " + output.getStatusEN());
			} else {
				logger.info(" Failed | stub.addLandRequest(inputpayload, uc)  Returns Null");
				outputVO.setStatus(SERVICE_FAILED);
			}

		} catch (Exception e) {
			logger.error("Failed  | reSubmitIssueSitePlanRequest Service throws Service Exception :: " + e.getMessage());
			outputVO.setStatus(SERVICE_FAILED);
		}

		return outputVO;

	}

	/**
	 * This Method is responsible for Extension_Of_Grant_Land request Resubmit
	 * the request
	 * 
	 * WSDL -http://soa:8001/soa-infra/services/PS_Department/
	 * UAQ_PS_Extension_Of_Grant_Land
	 * /ExtensionOfGrantLandProcessForOut.service?WSDL JAR-UAQProxy
	 * 
	 * @author Pritam
	 * 
	 */

	public LandOutputVO reSubmitExtentionGrandLand(UserDeatilVO user, LandInputVO landDemacreationVO) throws DatatypeConfigurationException, ParseException {
		LandOutputVO outputVO = new LandOutputVO();

		com.uaq.proxies.ExtensionOfGrantLandProcessForOut.types.Inputpayload inputpayload = new com.uaq.proxies.ExtensionOfGrantLandProcessForOut.types.Inputpayload();

		com.uaq.proxies.ExtensionOfGrantLandProcessForOut.types.UserDetailsPayload userDetail = new com.uaq.proxies.ExtensionOfGrantLandProcessForOut.types.UserDetailsPayload();

		userDetail.setUsername(user.getLoginUserName());
		userDetail.setTypeOfUser(user.getTypeOfUser());
		userDetail.setNationality(user.getNationality());
		userDetail.setAccountid(user.getAccountid());
		userDetail.setMobileNo(user.getMobileNo());
		userDetail.setEmailID(user.getEmailID());
		userDetail.setEmiratesId(user.getEmiratesId());
		userDetail.setTradeLienceNo(user.getTradeLienceNo());
		userDetail.setFamilyBookNo(user.getFamilyBookNo());
		userDetail.setEmirate(user.getEmiratesCode());
		userDetail.setFirstName(user.getFirstName());
		userDetail.setMiddleName(user.getMiddleName());
		userDetail.setLastName(user.getLastName());
		userDetail.setAddress1(user.getAddress1());
		userDetail.setAddress2(user.getAddress2());
		userDetail.setAddress3(user.getAddress3());
		userDetail.setPOBOX(user.getPOBOX());
		userDetail.setDOB(null);

		if (user.getTypeOfUser().equals("1")) {
			userDetail.setApplicantTypeid(user.getApplicantTypeId());
		} else {
			userDetail.setApplicantTypeid("0");
		}

		inputpayload.setServiceType(landDemacreationVO.getServiceType());
		inputpayload.setUserComment(landDemacreationVO.getUserComment());
		inputpayload.setSubmittedByUserId(landDemacreationVO.getSubmittedByUserId());
		inputpayload.setSourceType(landDemacreationVO.getSourceType());
		inputpayload.setStatus(landDemacreationVO.getStatus());
		inputpayload.setServiceName(landDemacreationVO.getServiceName());
		inputpayload.setServiceid(landDemacreationVO.getServiceid());
		inputpayload.setRequestID(landDemacreationVO.getRequestID());
		inputpayload.setRequestNo(landDemacreationVO.getRequestNo());
		inputpayload.setWorkflowId(landDemacreationVO.getWorkflowId()); //
		inputpayload.setLandDemarcationId(landDemacreationVO.getLandDemarcationId());
		inputpayload.setLanguageId(landDemacreationVO.getLanguageId());
		inputpayload.setSitePlanNo(landDemacreationVO.getSite_Plan_No());
		inputpayload.setSitePlanDate(null);
		inputpayload.setSecPlotNo(landDemacreationVO.getSecPlotNo());
		inputpayload.setSectorBlock(landDemacreationVO.getSectorBlock());
		inputpayload.setSecSectorName(landDemacreationVO.getSecSectorName());
		inputpayload.setSubSectorNo(landDemacreationVO.getSubSectorNo());
		inputpayload.setAreaName(landDemacreationVO.getAreaName());
		inputpayload.setAreaBlock(landDemacreationVO.getAreaBlock());
		inputpayload.setAreaPlotNo(landDemacreationVO.getAreaPlotNo());
		inputpayload.setAreaSubArea(landDemacreationVO.getAreaSubArea());

		inputpayload.setLandUsage(landDemacreationVO.getLandUsage());
		inputpayload.setGrantIssuanceDate(DateUtil.convertStringToXMLGregorianCalendar(landDemacreationVO.getGrantIssuanceDate()));
		inputpayload.setGrantexpirydate(DateUtil.convertStringToXMLGregorianCalendar(landDemacreationVO.getGrantExpiryDate()));

		inputpayload.setOwnerName(landDemacreationVO.getOwnerName());
		inputpayload.setUserdecision(landDemacreationVO.getUserDecesion());

		inputpayload.setOwnerID(landDemacreationVO.getOwnerID());
		inputpayload.setOwnerNationalityID(landDemacreationVO.getOwnerNationalityID());
		inputpayload.setSupportiveAttachmentid(landDemacreationVO.getSupportiveAttachmentid());
		inputpayload.setExtendedDate(null);

		inputpayload.setLandDemarcationId("");
		inputpayload.setFrontdesksubmitdate(null);

		inputpayload.setExtensionofgrantlandid(landDemacreationVO.getExtensionOfGrantLandId());

		inputpayload.setMarkasDelivered("");
		inputpayload.setOperatorComment("");
		inputpayload.setRecieverIDDocument("");

		inputpayload.setAssignedToUserName(user.getUsername());

		String did = "";
		String filenme = "";
		String ucmUrl = "";
		com.uaq.proxies.ExtensionOfGrantLandProcessForOut.types.AttachmentListPayload attachmentList = new com.uaq.proxies.ExtensionOfGrantLandProcessForOut.types.AttachmentListPayload();
		if (!StringUtil.isEmpty(landDemacreationVO.getSitePlanDocument())) {
			String filenmae = landDemacreationVO.getSitePlanDocument();
			logger.debug("File Name from Controller   |  " + filenmae);
			did = filenmae.split("-")[0];
			filenme = filenmae.split("-")[1];
			logger.debug("File Did=" + did);
			logger.debug("File filenme=" + filenme);
			ucmUrl = uCMCenterURLService.getWebCenterURLofFile(did);
			logger.debug("From WebCenter URL=" + ucmUrl);
			com.uaq.proxies.ExtensionOfGrantLandProcessForOut.types.AttachmentRecPayload attachmentRec = new com.uaq.proxies.ExtensionOfGrantLandProcessForOut.types.AttachmentRecPayload();

			attachmentRec.setContentid(did);
			attachmentRec.setFilename(filenme);
			attachmentRec.setUrl(ucmUrl);
			attachmentRec.setIsMandatory("1");
			attachmentRec.setDownloadUrl("");
			attachmentRec.setDocType("10");

			attachmentList.getAttachmentRec().add(attachmentRec);
		}

		
		

		inputpayload.setAttachmentList(attachmentList);
		inputpayload.setUserDetails(userDetail);

		try {
			OutputPayload output = webServiceWarpper.resubmitExtGrandLand(inputpayload, PropertiesUtil.getProperty("SOA_URL_PS_EXTENTIONGRANDLAND_RESUBMIT"),
					PropertiesUtil.getProperty("SOA_USERNAME"), PropertiesUtil.getProperty("SOA_PASSWORD"));
			if (output != null) {
				outputVO.setStatus(output.getStausFlag());
				outputVO.setStatus_EN(output.getStatusEN());
				outputVO.setStatus_AR(output.getStatusAR());
				outputVO.setSatausId(output.getInputFields().getStatus());
				outputVO.setServiceId(output.getInputFields().getServiceid());
				outputVO.setRequestNo(output.getRequestNo());
				logger.info(output.getStausFlag() + "  | " + output.getStatusEN());
			} else {
				logger.info(" Failure | stub.addLandRequest(inputpayload, uc)  Return Null");
				outputVO.setStatus(SERVICE_FAILED);
			}

		} catch (Exception e) {
			logger.error("Failure  |  " + e.getMessage());
			outputVO.setStatus(SERVICE_FAILED);
		}

		return outputVO;

	}

}
