package com.uaq.service;

import static com.uaq.common.ApplicationConstants.COMMA;
import static com.uaq.common.ApplicationConstants.LANG_ENGLISH;
import static com.uaq.common.ApplicationConstants.REQUEST_PARAM_PAGE_LABLE;
import static com.uaq.common.ApplicationConstants.REQUEST_PARAM_REQUEST_NO;
import static com.uaq.common.ApplicationConstants.REQUEST_PARAM_SERVICE_ID;
import static com.uaq.common.ApplicationConstants.REQUEST_PARAM_STATUS_ID;
import static com.uaq.common.ApplicationConstants.REQUEST_PARAM_TYPE_OF_USER;
import static com.uaq.common.ApplicationConstants.UNDERSCORE;
import static com.uaq.common.ServiceNameConstant.ADD_LAND_REQUEST;
import static com.uaq.common.ServiceNameConstant.EXTENTION_OF_GRANT_LAND_REQUEST;
import static com.uaq.common.ServiceNameConstant.GRANT_LAND_REQUEST;
import static com.uaq.common.ServiceNameConstant.ISSUE_NEW_PRO_REQUEST;
import static com.uaq.common.ServiceNameConstant.ISSUE_SITE_PLAN_DOCUMENT_REQUEST;
import static com.uaq.common.ServiceNameConstant.ISSUE_TO_WHOME_IT_MAY_CERTIFICATE;
import static com.uaq.common.ServiceNameConstant.LAND_DEMACRATION_REQUEST;
import static com.uaq.common.ServiceNameConstant.LAND_PROPERTY_VALUTION_REQUEST;
import static com.uaq.common.ServiceNameConstant.LOST_DOCUMENT;
import static com.uaq.common.ServiceNameConstant.NEW_REAL_ESTATE;
import static com.uaq.common.ServiceNameConstant.NEW_SUPPLIER_REGISTRATION;
import static com.uaq.common.ServiceNameConstant.RENEW_PRO_REQUEST;
import static com.uaq.common.ServiceNameConstant.RENEW_REAL_ESTATE;
import static com.uaq.common.ServiceNameConstant.RENEW_SUPPLIER_REGISTRATION;
import static com.uaq.common.StatusNameConstant.PROCEED_TO_APPLICATION_FEE_PAYMENT;
import static com.uaq.common.StatusNameConstant.PROCEED_TO_SERVICE_FEE_PAYMENT;
import static com.uaq.common.WebServiceConstant.SOAP_FEETYPE_ARGUMENT;
import static com.uaq.common.WebServiceConstant.SOAP_LANDTYPE_ARGUMENT;
import static com.uaq.common.WebServiceConstant.SOAP_REQUESTNO_ARGUMENT;
import static com.uaq.common.WebServiceConstant.SOAP_SERVICEID_ARGUMENT;
import static com.uaq.common.WebServiceConstant.SOAP_USERTYPE_ARGUMENT;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import uaq.db.si.model.common.LpValuationViewSDO;
import uaq.pymt.si.model.common.EserviceFeeMatrixViewSDO;

import com.uaq.common.PropertiesUtil;
import com.uaq.logger.UAQLogger;
import com.uaq.util.StringUtil;
import com.uaq.vo.LPtoWhomeConcernVO;
import com.uaq.vo.PSResubmissonOutputVO;
import com.uaq.vo.ReSubmiisionInputVO;

public class FeeIdService {
	
	protected static UAQLogger logger = new UAQLogger(FeeIdService.class);
	
	private PaymentService paymentService;
	
	
	public FeeIdService(){
		paymentService =new PaymentService();
	}
	
	public String getAmountForService(String requestNo,String serviceId,String statusId,String typeOfUser) throws Exception{
	Map<String, String> queryParamsMap = new HashMap<String, String>();
	queryParamsMap.put(REQUEST_PARAM_REQUEST_NO, requestNo);
	queryParamsMap.put(REQUEST_PARAM_SERVICE_ID, serviceId);
	queryParamsMap.put(REQUEST_PARAM_STATUS_ID, statusId);
	queryParamsMap.put(REQUEST_PARAM_TYPE_OF_USER, typeOfUser);

	
	List<EserviceFeeMatrixViewSDO> paymentFeeIdList = paymentService.getPaymentFeeIdList(getSearchCriteriaMap(serviceId,queryParamsMap));
	String feeId ="";
	String amount="";
	if (paymentFeeIdList != null) {
		for (EserviceFeeMatrixViewSDO obj : paymentFeeIdList) {
			feeId = obj.getFeeId().getValue();
			amount=String.valueOf(obj.getAmount().getValue());
		}
	}
	if(StringUtil.isEmpty(amount)){
		throw new Exception("No Value Return.Check your condition");
	}
	return amount;
	}
		private Map<String, String> getSearchCriteriaMap(String serviceId, Map<String, String> queryParamsMap) throws Exception {
			Map<String, String> searchCriteriaMap = null;
			String keywords[]=null;
			String typeOfUser="";
			switch (serviceId) {
			
			case ISSUE_NEW_PRO_REQUEST:
				searchCriteriaMap = new HashMap<String, String>();
				String procardrequestStatus = queryParamsMap.get(REQUEST_PARAM_STATUS_ID);
				String procardpropertyFileKey = serviceId + UNDERSCORE + procardrequestStatus;
				String procardSerachCrieteria = PropertiesUtil.getProperty(procardpropertyFileKey);
				keywords = procardSerachCrieteria.split(COMMA);
				searchCriteriaMap.put(SOAP_SERVICEID_ARGUMENT, ISSUE_NEW_PRO_REQUEST);
				searchCriteriaMap.put(SOAP_FEETYPE_ARGUMENT, keywords[0]);
				// searchCriteriaMap.put(SOAP_USERTYPE_ARGUMENT, keywords[1]);
				break;

			case RENEW_PRO_REQUEST:
				searchCriteriaMap = new HashMap<String, String>();
				String renewprocardrequestStatus = queryParamsMap.get(REQUEST_PARAM_STATUS_ID);
				String renewprocardFileKey = serviceId + UNDERSCORE + renewprocardrequestStatus;
				String renewprocardFileCrieteria = PropertiesUtil.getProperty(renewprocardFileKey);
				keywords = renewprocardFileCrieteria.split(COMMA);
				searchCriteriaMap.put(SOAP_SERVICEID_ARGUMENT, RENEW_PRO_REQUEST);
				searchCriteriaMap.put(SOAP_FEETYPE_ARGUMENT, keywords[0]);
				// searchCriteriaMap.put(SOAP_USERTYPE_ARGUMENT, keywords[1]);
				break;
			case LAND_PROPERTY_VALUTION_REQUEST:
				searchCriteriaMap = new HashMap<String, String>();
				String landPropertyStatus = queryParamsMap.get(REQUEST_PARAM_STATUS_ID);
				// Get The OwnerType
				
				
				String landPropertyFileKey = "";
				String landPropertyFileCrieteria = "";
				if (PROCEED_TO_APPLICATION_FEE_PAYMENT.equals(landPropertyStatus)) {
					landPropertyFileKey = serviceId + UNDERSCORE + landPropertyStatus;
					landPropertyFileCrieteria = PropertiesUtil.getProperty(landPropertyFileKey);
					keywords = landPropertyFileCrieteria.split(COMMA);
					searchCriteriaMap.put(SOAP_SERVICEID_ARGUMENT, LAND_PROPERTY_VALUTION_REQUEST);
					searchCriteriaMap.put(SOAP_FEETYPE_ARGUMENT, keywords[0]);
				} 

				// searchCriteriaMap.put(SOAP_USERTYPE_ARGUMENT, keywords[1]);
				break;
			
			case NEW_REAL_ESTATE:
				searchCriteriaMap = new HashMap<String, String>();
				String realStateStatus = queryParamsMap.get(REQUEST_PARAM_STATUS_ID);
				String realStatePropertyFileKey = serviceId + UNDERSCORE + realStateStatus;
				String realStateCritera = PropertiesUtil.getProperty(realStatePropertyFileKey);
				searchCriteriaMap.put(SOAP_SERVICEID_ARGUMENT, NEW_REAL_ESTATE);
				searchCriteriaMap.put(SOAP_FEETYPE_ARGUMENT, realStateCritera);
				break;
			case RENEW_REAL_ESTATE:
				searchCriteriaMap = new HashMap<String, String>();
				String renewRealStateStatus = queryParamsMap.get(REQUEST_PARAM_STATUS_ID);
				String renewRealStatePropertyFileKey = serviceId + UNDERSCORE + renewRealStateStatus;
				String renewRealStateCritera = PropertiesUtil.getProperty(renewRealStatePropertyFileKey);
				searchCriteriaMap.put(SOAP_SERVICEID_ARGUMENT, RENEW_REAL_ESTATE);
				searchCriteriaMap.put(SOAP_FEETYPE_ARGUMENT, renewRealStateCritera);
				break;
			case LOST_DOCUMENT:
				searchCriteriaMap = new HashMap<String, String>();
				String lostDocumentStatus = queryParamsMap.get(REQUEST_PARAM_STATUS_ID);
				String lostDocumentPropertyFileKey = serviceId + UNDERSCORE + lostDocumentStatus;
				String lostDocumentCritera = PropertiesUtil.getProperty(lostDocumentPropertyFileKey);
				searchCriteriaMap.put(SOAP_SERVICEID_ARGUMENT, LOST_DOCUMENT);
				searchCriteriaMap.put(SOAP_FEETYPE_ARGUMENT, lostDocumentCritera);
				break;
			case GRANT_LAND_REQUEST:
				searchCriteriaMap = new HashMap<String, String>();
				String grantLandTypeofUser = queryParamsMap.get(REQUEST_PARAM_TYPE_OF_USER);
				String grantLandrequestSTatus = queryParamsMap.get(REQUEST_PARAM_STATUS_ID);
				String grantLandrequestpropertyFileKey = serviceId + UNDERSCORE + grantLandrequestSTatus + UNDERSCORE + grantLandTypeofUser;
				String grantLandSerachCrieteria = PropertiesUtil.getProperty(grantLandrequestpropertyFileKey);
				keywords = grantLandSerachCrieteria.split(COMMA);
				searchCriteriaMap.put(SOAP_SERVICEID_ARGUMENT, GRANT_LAND_REQUEST);
				searchCriteriaMap.put(SOAP_FEETYPE_ARGUMENT, keywords[0]);
				searchCriteriaMap.put(SOAP_USERTYPE_ARGUMENT, keywords[1]);
				break;

			default:
				searchCriteriaMap = new HashMap<String, String>();

			}

			return searchCriteriaMap;
		}
}
