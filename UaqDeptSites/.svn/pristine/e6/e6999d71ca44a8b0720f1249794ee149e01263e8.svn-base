package com.uaq.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import com.uaq.command.WasteContainerCommand;
import com.uaq.common.PropertiesUtil;
import com.uaq.common.ServiceNameConstant;
import com.uaq.logger.UAQLogger;
import com.uaq.soap.warpper.WebServiceWarpper;
import com.uaq.vo.UserDeatilVO;
import com.uaq.vo.WasteContainerRequestInputVO;
import com.uaq.vo.WasteContainerRequestOutputVO;

import static com.uaq.common.ApplicationConstants.*;

/**
 * Service class for ReSubmit Waste Containor Detail
 * 
 * 
 * 
 * Jar Name-PWSDepartmentReSubmit.jar
 * WSDL-http://94.57.252.234:7001/UAQPWSMiddlewareService
 * /UAQPWSServicesPort?WSDL
 * 
 * @author Pritam
 * 
 */
@Service
@Qualifier("pWSResubmitRequestService")
public class PWSResubmitRequestService {

	protected static UAQLogger logger = new UAQLogger(PWSResubmitRequestService.class);

	@Autowired
	private UCMCenterURLService uCMCenterURLService;

	public WasteContainerRequestOutputVO reSubmitWasteContainor(UserDeatilVO user, WasteContainerRequestInputVO input, WasteContainerCommand wasteContainerCommand) {

		WasteContainerRequestOutputVO outputVO = new WasteContainerRequestOutputVO();
		com.uaq.proxies.NewWasteContainerProForOut.types.Inputpayload inputpayload = new com.uaq.proxies.NewWasteContainerProForOut.types.Inputpayload();
		com.uaq.proxies.NewWasteContainerProForOut.types.UserDetailsPayload userDetail = new com.uaq.proxies.NewWasteContainerProForOut.types.UserDetailsPayload();

		userDetail.setUsername(user.getLoginUserName());
		userDetail.setTypeOfUser(user.getTypeOfUser());
		userDetail.setNationality(user.getNationality());
		userDetail.setAccountid(user.getAccountid());
		userDetail.setMobileNo(user.getMobileNo());
		userDetail.setEmailID(user.getEmailID());
		userDetail.setEmiratesId(user.getEmiratesId());
		userDetail.setTradeLienceNo(user.getTradeLienceNo());
		userDetail.setFamilyBookNo(user.getFamilyBookNo());
		userDetail.setFirstName(user.getFirstName());
		userDetail.setMiddleName(user.getMiddleName());
		userDetail.setLastName(user.getLastName());
		userDetail.setAddress1(user.getAddress1());
		userDetail.setAddress2(user.getAddress2());
		userDetail.setAddress3(user.getAddress3());
		userDetail.setPOBOX(user.getPOBOX());
		userDetail.setDOB(null);
		userDetail.setEmirate(String.valueOf(user.getEmiratesCode()));

		if (userDetail.getTypeOfUser().equals("1")) {
			userDetail.setApplicanttypeid(user.getApplicantTypeId());
		} else {
			userDetail.setApplicanttypeid("0");
		}

		inputpayload.setUserDetails(userDetail);

		inputpayload.setAddress1(input.getAddress());
		inputpayload.setAddress2(input.getAddress());
		inputpayload.setDeliveredAT(null);
		inputpayload.setDeliveredBY(user.getAccountid());
		inputpayload.setLanguageId(input.getLanguageId());
		inputpayload.setLatitude(input.getLatitude());
		inputpayload.setLongitude(input.getLongitude());
		inputpayload.setPostbox(user.getPOBOX());
		inputpayload.setReplacementReason(input.getReplacement());
		inputpayload.setWasteContainerReqId(wasteContainerCommand.getWasteCOntainoerId());
		inputpayload.setRequestID(wasteContainerCommand.getRequestNo().split("-")[3]);
		inputpayload.setRequestNo(wasteContainerCommand.getRequestNo());
		inputpayload.setServiceid(wasteContainerCommand.getServiceId());
		inputpayload.setUserAccountid(user.getAccountid());
		inputpayload.setServiceName(ServiceNameConstant.NEW_WASTE_CONTAINER_NAME);
		inputpayload.setServiceType(input.getServiceType());
		inputpayload.setSourceType(wasteContainerCommand.getSorceType());
		inputpayload.setStatus(wasteContainerCommand.getStatus());
		inputpayload.setSubmittedByUserId(user.getUsername());
		inputpayload.setUserComment("");
		inputpayload.setWorkflowId("1");

		com.uaq.proxies.NewWasteContainerProForOut.types.AttachmentListPayload fileList = new com.uaq.proxies.NewWasteContainerProForOut.types.AttachmentListPayload();
		for (int i = 0; i < input.getFiles().size(); i++) {

			String filename = input.getFiles().get(i);
			logger.debug("File Name from Controller   |  " + filename);
			String did = filename.split("-")[0];
			String name = filename.split("-")[1];
			String ucmUrl = uCMCenterURLService.getWebCenterURLofFile(did);
			logger.debug("From WebCenter URL=" + ucmUrl);
			com.uaq.proxies.NewWasteContainerProForOut.types.AttachmentRecPayload attachmentRecPayload = new com.uaq.proxies.NewWasteContainerProForOut.types.AttachmentRecPayload();
			attachmentRecPayload.setContentid(did);
			attachmentRecPayload.setUrl(ucmUrl);
			attachmentRecPayload.setFileExpiryDate("10/20/2017");
			attachmentRecPayload.setFilename(name);
			// TODO: need to check with saourav what should be the correct
			// IsMandatory value for resubmit.
			attachmentRecPayload.setIsMandatory("1");
			attachmentRecPayload.setFileType("5");
			fileList.getAttachmentRec().add(attachmentRecPayload);

		}

		inputpayload.setAttachmentList(fileList);

		try {
			com.uaq.proxies.NewWasteContainerProForOut.types.OutputPayload ouput = new WebServiceWarpper().reSubmitWasteContainor(inputpayload,
					PropertiesUtil.getProperty("SOA_URL_PWS_RESUBMIT"), PropertiesUtil.getProperty("SOA_USERNAME"), PropertiesUtil.getProperty("SOA_PASSWORD"));

			if (ouput != null) {
				outputVO.setStatus(ouput.getStausFlag());
				outputVO.setMessage_EN(ouput.getStatusEN());
				outputVO.setMessage_AR(ouput.getStatusAR());
				logger.debug("Success  |  " + ouput.getStatusEN());
			} else {
				outputVO.setStatus(SERVICE_FAILED);
				logger.error("Failed  |  new WebServiceWarpper().reSubmitWasteContainor(inputpayload,; return null");
			}
		} catch (Exception e) {
			outputVO.setStatus(SERVICE_FAILED);
			logger.error("Failed  |" + e.getMessage());

		}

		return outputVO;

	}

}
