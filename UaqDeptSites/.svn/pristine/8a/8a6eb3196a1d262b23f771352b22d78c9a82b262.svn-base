package com.uaq.service;

import static com.uaq.common.ApplicationConstants.ESTABLISMENT_USER;
import static com.uaq.common.ApplicationConstants.INDIVIDUAL_USER;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import javax.xml.soap.MessageFactory;
import javax.xml.soap.SOAPBody;
import javax.xml.soap.SOAPBodyElement;
import javax.xml.soap.SOAPElement;
import javax.xml.soap.SOAPEnvelope;
import javax.xml.soap.SOAPException;
import javax.xml.soap.SOAPMessage;
import javax.xml.soap.SOAPPart;

import org.springframework.stereotype.Service;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.uaq.common.PropertiesUtil;
import com.uaq.logger.UAQLogger;
import com.uaq.proxies.generateotpbpel_client_ep.types.EstablishmentPayload;
import com.uaq.proxies.generateotpbpel_client_ep.types.IndividualPayload;
import com.uaq.proxies.generateotpbpel_client_ep.types.InputPayload;
import com.uaq.proxies.generateotpbpel_client_ep.types.OutputPayload;
import com.uaq.soap.warpper.WebServiceWarpper;
import com.uaq.util.SOAPClient;
import com.uaq.vo.AccountDetailInputVO;
import com.uaq.vo.GenerateOTPInputVO;

@Service("generateOTPService")
public class GenerateOTPService {

	protected static UAQLogger logger = new UAQLogger(GenerateOTPService.class);

	public String generateOTP(GenerateOTPInputVO input) throws Exception {
		InputPayload inputPayload = new InputPayload();
		inputPayload.setTypeOfUser(input.getTypeOfUser());
		inputPayload.setAccountId(input.getAccountId());
		IndividualPayload individualPayload = new IndividualPayload();
		EstablishmentPayload establishmentPayload = new EstablishmentPayload();
		if (INDIVIDUAL_USER.equals(input.getTypeOfUser())) {
			
			individualPayload.setMobileNo(input.getMobile());
			individualPayload.setEmiratesID(input.getEmirateId());
			individualPayload.setPassportID(input.getPassportId());
		}
		if (ESTABLISMENT_USER.equals(input.getTypeOfUser())) {
			
			establishmentPayload.setMobileNo(input.getMobile());
			establishmentPayload.setTradeLicenseNo(input.getTraedLicenceNumber());
			establishmentPayload.setEmiratesCode(input.getEmirate());
		}
		inputPayload.setIndividualREC(individualPayload);
		inputPayload.setEstablishmentREC(establishmentPayload);
		OutputPayload output = new WebServiceWarpper().generateOTP(inputPayload, PropertiesUtil.getProperty("SOA_URL_GENERATE_OTP"), PropertiesUtil.getProperty("SOA_USERNAME"), PropertiesUtil.getProperty("SOA_PASSWORD"));
		String status = output.getStatus();
		logger.debug(status);

		return status;

	}

	/*public void getAccountDetail(AccountDetailInputVO input) throws Exception {

		MessageFactory messageFactory;

		String otp = null;

		messageFactory = MessageFactory.newInstance();
		SOAPMessage requestMessage = messageFactory.createMessage();
		SOAPPart soapPart = requestMessage.getSOAPPart();
		SOAPEnvelope envelope = soapPart.getEnvelope();

		String serverURI = "http://GetAccountDetails";

		envelope.addNamespaceDeclaration("get", serverURI);

		SOAPElement Input = envelope.getBody().addChildElement("Input", "get");

		SOAPElement typeOfUser = Input.addChildElement("TypeOfUser", "get");
		typeOfUser.addTextNode(input.getTypeofUser());

		SOAPElement IndividualREC = Input.addChildElement("IndividualREC", "get");
		SOAPElement EstablishmentREC = Input.addChildElement("EstablishmentREC", "get");

		if (INDIVIDUAL_USER.equals(input.getTypeofUser())) {
			SOAPElement mobileNo = IndividualREC.addChildElement("MobileNo", "get");
			mobileNo.addTextNode(input.getMobileNo());
			SOAPElement emiratesID = IndividualREC.addChildElement("EmiratesID", "get");
			emiratesID.addTextNode(input.getEmiratesID());
			SOAPElement passportID = IndividualREC.addChildElement("PassportID", "get");
			passportID.addTextNode(input.getPassportID());
		}
		if (ESTABLISMENT_USER.equals(input.getTypeofUser())) {
			SOAPElement mobileNo = EstablishmentREC.addChildElement("MobileNo", "get");
			mobileNo.addTextNode(input.getMobileNo());
			SOAPElement tradeLicenseNo = EstablishmentREC.addChildElement("TradeLicenseNo", "get");
			tradeLicenseNo.addTextNode(input.getTraedLicence());
			SOAPElement emiratesCode = EstablishmentREC.addChildElement("EmiratesCode", "get");
			emiratesCode.addTextNode("6");
		}

		SOAPClient.printSOAPMessage(requestMessage);

		SOAPMessage soapResponse = SOAPClient.callSOAPService(requestMessage, "http://soa:8001/soa-infra/services/default/UAQ_REG_GetAccountDetails/getaccountdetailsbpel_client_ep?WSDL");

		SOAPClient.printSOAPMessage(soapResponse);

		Map<String, Object> responceMap = createMap(soapResponse.getSOAPBody());
		for (Map.Entry entry : responceMap.entrySet()) {
			System.out.println(entry.getKey() + ", " + entry.getValue());
		}
	}
	
	public Map<String, Object> createMap(Node node) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put(node.getLocalName(), createChildMap(node));
		
		NodeList nodeList = node.getChildNodes();
		for (int i = 0; i < nodeList.getLength(); i++) {
			Node currentNode = nodeList.item(i);
			if (currentNode.hasChildNodes()&&currentNode.getFirstChild().getNodeType() == Node.TEXT_NODE) {
				map.put(currentNode.getLocalName(), currentNode.getTextContent());
			} else if (currentNode.getFirstChild() != null && currentNode.getFirstChild().getNodeType() == Node.ELEMENT_NODE) {

				
				map.put(currentNode.getLocalName(), createChildMap(currentNode));
				
				}
		
		}
		return map;

	}
	public Map<String, Object> createChildMap(Node node) {
		Map<String, Object> childMap = new HashMap<String, Object>();
		NodeList nodeList = node.getChildNodes();
		for (int i = 0; i < nodeList.getLength(); i++) {
			Node currentNode = nodeList.item(i);
			if (currentNode.hasChildNodes()&&currentNode.getFirstChild().getNodeType() == Node.TEXT_NODE) {
				childMap.put(currentNode.getLocalName(), currentNode.getTextContent());
			} else if (currentNode.getFirstChild() != null && currentNode.getFirstChild().getNodeType() == Node.ELEMENT_NODE) {

				childMap.put(currentNode.getLocalName(), createChildMap(currentNode));
				
				
				}
			
		
		}
		return childMap;

	}*/
}
